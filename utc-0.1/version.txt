-Version 0.1
    0.1-1
    [Update]
        none
    [New]
        -Ranklist     a int vector like list, used for mapping task to different processes, used
		              when creating a user task.
			     eg. (1 1 1) means task have 3 threads, both on process1
				     (1 2 3 3) means task have 4 threads, thread1 on process1, thread2 on 
				     process2, thread3/4 on process3
		
        -RootTask     a class derived from TaskBase. Created by system at initialization, not user. 
		              Eash process has one and only one RootTask obj, all other tasks are children of 
		              this roottask. root task has one thread, actually is the main thread of the 
		              process. Other task will run on other threads created on this process.
		
        -TaskBase      the base class for task. Define some common functions and data for task.
		          eg.  m_TaskId  a logical number create for this task.
		               m_numProcesses  how many processes this task would use for run.
		               m_numLocalThreads  how many threads this task has on current process.
		               m_LocalThreadRegistry  a map from threadid to thread rank of task at current
		                                      process.
		                                      
        -TaskInfo      a struct define several basic infomation about a task. every thread will
                       create a TaskInfo struct, it was implemented as TSS(thread specifice storage).
                       roottask also has this in main thread of a process.
                       
        -TaskManager   a singlton class create by system at initialization. Supply some static 
                       methods to get task realated info in a process. A thread of a task can call
                       these methods to identify himselt. Each process has one and only
                       one TaskManager object during whole program. It has a map to record taskid 
                       and coresponded task object. Each task will be registed by taskmanager. 
                       Also TaskInfo struct is defied in it. 
                       TODO: improving the singleton implemention      
                        	                                      
        -Utc.h          a main header file that user shoudl include in his program to use this system
        
        -UtcBase        a base interface class, which will be implemented by UtcMpi.
        
        -UtcBasics.h    a main header file that has some global definations or declartions or 
                        configurations that our system will use.
        
        -UtcContext     the enterpoint class that will initialize system at beginning and close 
                        system at program end. Startup the UTC runtime environment, create necessory
                        processes, create root task, task manager on each process.
                        Use should define an object of this class at beginning of program, and only 
                        onece. 
                        TODO: considering implement this class as singleton
                        
        -UtcException   the error/exception processing class, not used in system now.
                        TODO:  add error/exception process mechanism in our system.
                        
        -UtcMpi         the actual UTC runtime initialize/finalize class. We use MPI as system's 
                        base runtime environment. Realizing the multi-processes runtime for 
                        computation, also network runtime for communication. 
                        Within process, for multi-threads runtime, we can use POSIX thread, 
                        boost thread or c++11 thread, right now we use c++11 thread together with
                        boost thread. Prefering c++11 thread first, this may have portable problem 
                        depending on how much the compiler supports c++11. 
                        
    
    0.1-2
    [Update]
        RootTask        Initialize m_threadPrivateData, creating and opening a file for output for current
                        process.
        
        TaskBase        Add m_procOstream, m_threadPrivateData.  m_procOstream is a std::ofstream, for each
                        process, we will create an file for output. If define "USE_DEBUG_LOG", this obj will
                        be created in roottask, else it will be create when firt time call getProcOstream()
                        in main program.
                        m_threadPrivateData is a structure to include some thread specific data, that will 
                        stored in TSS using boost::thread_specific_ptr. If define "USE_DEBUG_LOG", it will
                        be created in task::ThreadImpl() for each runing thread, else will be create at
                        first time call getThreadOstream() in user's task classes.
                        
        TaskInfo        Add ThreadPrivateData structue to include some thread specific data.
        
    [New]
        Task            Implemented Task class.
                        Task class use Template to refering user defined task(user-task class)
                        When define a Task, a Task obj will be created on each process, but only mapped 
                        processes will launch threads for that task. In Task obj, we will create a user-task
                        obj, which will be shared by all task threads in a process.
                        As we use Template, so all Task member functions are defined in Task.inc, and will 
                        be included in Task.h. Separate compiling is not allowed when using Template.
                        Right now when a task thread launched, it will wait for calling init(), run(), waitTillDone()
                        function from main program. init()/run() do not accept arguments.
                        TODO:  overload these functions with Tempalte to acctept various number of arguments.
                        We construct user-task obj with "new T", so we use user-task's default constructor, it's 
                        suggest that user-task class do not define default constructor\destructor, do all initialization in
                        init() method.
                        TODO:  allow user define user-class obj in main program, and use this obj as a argument
                               when defining a task. And will use this user-class obj to invoke user-task's init()
                               run() function in our inner task obj.
                        Now, a task using flow is like:
                                define a task using user-task class;
                                call init()
                                call run()
                                call waitTillDone()
                        a task obj can only be used for once with this flow.
                        TODO:  change thread running mechnism, allowing a task obj can be used for several times, 
                               means, we can init() and run() again with same task obj.
                        In our Task design, a Task obj involve two objects:
                            one is system-task obj(the Task class);
                            one is user-task obj(the Template class, supplied by user)
                            system-task obj has init(), run(), waitTillDone() and many other methods;
                            user-task obj should only have init(), run() methods, which realizing user's specific algorithm.
                            user-task's methods will be called in system-task's methods to complete execution.
                        Remembering in one process, for a task, all threads share same system-task obj and same user-task obj.
                        
                                         

    0.1-3
    [Update]
        TaskBase
        Task
        RootTask        Add ofstream for output system debug log file. We will create a log file for
                        each process, each task thread, and define a ofstream obj for it. User program
                        can also get this ofstream to output info to specific file.
                        Be careful that this ofstream is passed and used as pointer, as ofstream obj is not
                        copiable or assignable.
                      
        
        
    [New]
        ConduitManager  Similar as TaskManager, is a singlton class. In UtcContext we will create
                        a object instanse for this class. It will record all the conduit obj create
                        in the program. 
                                     
        Conduit         Firt in-process, cross-task conduit implementation. Now we are planing to realize 3 pairs
                        of read/write operation. Now we have realized first read/write operation.
                        1. A conduit obj is associated with two task obj - src/dst.
                        2. A conduit obj is shared by all task threads.
                        3. A conduit obj is passed as pointer to user task obj.
                        4. User task use conduit's read/write obj for read or wirte data from or to conduit.
                        5. In current design, src read and dst write share a buffer pool, while src write and dst read
                        share another buffer pool. So it's a full-duplex communication channel.
                        6. Because it's in process conduit, so reader and writer share a intermediate buffer for data
                        transfer. Shared memory communication between threads.
                                                       
        Timer           A timer object, that has start/stop methods to caculate a time period.
                        We use std::chrono::steady_clock to implement this timer obj.            
                      
                        

-Version 0.1.0
			The first usable task&conduit prototype. Implement task create procedure, inproc conduit, xproc 
			conduit.
			
			
			
-Version 0.1.1	
			Finish debugging the last version. Right now the main problem of the system is conduit's 
			performance. 
			Improving inproc conduit communication using "lock free" design and algorithm.
			
                                                               
